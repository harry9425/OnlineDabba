const mongoose = require('mongoose');
let crypto=require('crypto');

let emailvalidator = require("email-validator");

let regex = new RegExp("/^\d{10}$/");

let UserSchema = mongoose.Schema({
    name: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        validate: {
            validator: function () {
                return emailvalidator.validate(this.email);
            },
        }
    },
    password: {
        type: String,
        required: true,
        minLength: 8,
    },
    confirmpassword: {
        type: String,
        required: true,
        minLength: 8,
        validate: {
            validator: function () {
                if(this.confirmpassword!='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@'){
                return this.password === this.confirmpassword;
                }
                else return true;
            },
            message: "Passwords don't match!!"
        }
    },
    phonenumber: {
        type: String,
        required: true,
        unique: true,
    },
    role: {
        type: String,
        enum: ['admin', 'user', 'seller'],
        default: 'user',
    },
    resettoken:{
        type:String
    },
    mess:{
        type:[String],
    },
    subscribed:[{ type: mongoose.Schema.Types.ObjectId, ref: 'subs' }],
});

UserSchema.methods.createResetToken=function(){
    let resettoken=crypto.randomBytes(64).toString('hex');
    this.resettoken=resettoken;
    return resettoken;
}

UserSchema.methods.resetpasswordHandler=function(password,confirmpassword){
    this.password=password;
    this.confirmpassword=confirmpassword;
    this.resettoken=undefined;
}

UserSchema.pre('save', function (next) {
    if(this.confirmpassword) this.confirmpassword = undefined;
    next();
});

module.exports = mongoose.model("Users", UserSchema);